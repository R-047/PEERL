import { getSession, signOut } from "next-auth/react";
import { useRouter } from "next/router";
import React, { useState, useEffect } from "react";
import useAuth from "../../hooks/useAuth";
import styles from "../../styles/HomePage.module.css";
import Image from "next/image";
import Head from "next/head";
import Link from "next/link";
import CommonHeader from "../../components/CommonHeader";
import axios from "axios";
import getConfig from "next/config";
import RoomBox from "../../components/RoomBox";
import PeerGroupRoomBox from "../../components/PeerGroupRoomBox";
import AlignItemsList from "../../components/Subscribers";
import Subscribers from "../../components/Subscribers";
import { fetchData } from "next-auth/client/_utils";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import { width } from "@mui/system";
import AddIcon from "@mui/icons-material/Add";
import Modal from "react-modal";
import TextField from "@mui/material/TextField";
import Card from "@mui/material/Card";
import CardActions from "@mui/material/CardActions";
import CardContent from "@mui/material/CardContent";
import Typography from "@mui/material/Typography";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

Modal.setAppElement("#__next");

const { publicRuntimeConfig } = getConfig();
const { HOST_URL } = publicRuntimeConfig;

function HomePage() {
  const router = useRouter();
  console.log(router.query.options);
  const context = router.query.options;
  const comp = (
    <div className={styles.main_div}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/peerllogo.svg" />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
          integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg=="
          crossOrigin="anonymous"
          referrerpolicy="no-referrer"
        />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/icon?family=Material+Icons"
        />

        <title>PEERL</title>
      </Head>
      {/* <button onClick={(e)=> signOut({ callbackUrl: 'http://localhost:3000/' })}>sign out</button> */}

      <CommonHeader />

      <div className={styles.body_flex_wrapper}>
        {context == "peergroups" && <Peergroup_comp />}
        {context == "rooms" && <Rooms_comp />}
        {context == "subscriptions" && <Subs_comp />}
        {context == "notebooks" && <Notebooks_comp />}
        <nav className={styles.nav_panel}>
          <Link href="/home/peergroups">
            <div className={styles.link_group}>
              <div className={styles.link_icon_peergroups}></div>
              <a className={styles.link_text}>peer groups</a>
            </div>
          </Link>
          <Link href="/home/rooms">
            <div className={styles.link_group}>
              <div className={styles.link_icon_rooms}></div>
              <a className={styles.link_text}>rooms</a>
            </div>
          </Link>
          <Link href="/home/subscriptions">
            <div className={styles.link_group}>
              <div className={styles.link_icon_subscriptions}></div>
              <a className={styles.link_text}>subscriptions</a>
            </div>
          </Link>
          <Link href="/home/notebooks">
            <div className={styles.link_group}>
              <div className={styles.link_icon_notebooks}></div>
              <a className={styles.link_text}>notebooks</a>
            </div>
          </Link>
          <Link href="/trending_rooms">
            <div className={styles.link_group}>
              <div className={styles.link_icon_trendingrooms}></div>
              <a className={styles.link_text}>trending rooms</a>
            </div>
          </Link>
        </nav>
      </div>
    </div>
  );
  return useAuth(comp);
  // return comp
}

export default HomePage;

function Peergroup_comp(props) {
  const router = useRouter();

  const init_state = [];
  const [peer_groups_state, setpeer_groups_state] = useState(init_state);

  useEffect(() => {
    async function fetchData() {
      const response = await axios.get(`${HOST_URL}/api/getPeerGroup`);
      console.log(response);
      setpeer_groups_state(response.data);
    }
    fetchData();
  }, []);

  const onRoomBoxClick = (id, name) => {
    router.push(
      {
        pathname: `/rooms/${name}/resources`,
        query: { room_id: id },
      },
      undefined,
      { shallow: true }
    );
  };

  const peer_groups_comp = peer_groups_state.map((ele) => {
    return (
      <PeerGroupRoomBox
        key={ele._id}
        key_id={ele.room_info._id}
        action={onRoomBoxClick}
        room_name={ele.room_info.room_name}
        room_owner_name={ele.room_owner_info.name}
        total_members={100}
        total_resources={100}
      />
      // <RoomBox key={ele._id} key_id={ele._id} room_name={ele.room_name} action={onRoomBoxClick} />
    );
  });

  const peergroup_comp_jsx = (
    <div className={styles.rooms_activities_wrapper}>
      <div className={styles.recent_activites_header_wrapper}>
        <p>recent activities</p>
        <div className={styles.activities_container}>
          <div className={styles.activity_rect}>
            <p>jason shared a new resource in OnTheBlocks </p>
            <span>
              <p>3 Hrs Ago</p>
            </span>
          </div>
          <div className={styles.activity_rect}></div>
          <div className={styles.activity_rect}></div>
          <div className={styles.activity_rect}></div>
          <div className={styles.activity_rect}></div>
        </div>
      </div>

      <div className={styles.rooms_header_wrapper}>
        <p>rooms joined</p>
        <div className={styles.rooms_container}>
          {peer_groups_comp}

          <div className={styles.room_box}>
            <div className={styles.room_coverimage}>
              <Image
                src="/Hero/test1.png"
                alt=""
                width={1000}
                height={550}
              ></Image>
            </div>
            <div className={styles.room_destext}>
              <p>101 Crypto Course</p>
              <span>Rohit EP</span>
            </div>
            <div className={styles.room_numbers}>
              <div className={styles.room_numbers_g1}>
                <i className="fa-solid fa-thumbs-up"></i>
                &nbsp;&nbsp;
                <span>110</span>
              </div>
              <div className={styles.room_numbers_g2}>
                <i className="fa-brands fa-rocketchat"></i>
                &nbsp;&nbsp;
                <span>23</span>
              </div>
            </div>
          </div>

          {/* <div className={styles.room_box}>
        <div className={styles.room_coverimage}>
          <Image src="/Hero/test1.png" alt="" width={1000} height={550}></Image>
        </div>
        <div className={styles.room_destext}>
          <p>101 Crypto Course</p>
          <span>Rohit EP</span>
        </div>
        <div className={styles.room_numbers}>
          <div className={styles.room_numbers_g1}>
            <i className="fa-solid fa-thumbs-up"></i>
            &nbsp;&nbsp;
            <span>110</span>
          </div>
          <div className={styles.room_numbers_g2}>
            <i className="fa-brands fa-rocketchat"></i>
            &nbsp;&nbsp;
            <span>23</span>
          </div>
        </div>
      </div>
      <div className={styles.room_box}>
      </div>
      <div className={styles.room_box}>
      </div> */}
        </div>
      </div>
    </div>
  );
  return peergroup_comp_jsx;
}

function Rooms_comp(props) {
  const router = useRouter();

  const init_state = [];
  const [your_rooms_state, setyour_rooms_state] = useState(init_state);

  useEffect(() => {
    async function fetchData() {
      const response = await axios.get(`${HOST_URL}/api/getUsersRooms`);
      setyour_rooms_state(response.data.result);
    }
    fetchData();
  }, []);

  const onRoomBoxClick = (id, name) => {
    router.push(
      {
        pathname: `/rooms/${name}/resources`,
        query: { room_id: id },
      },
      undefined,
      { shallow: true }
    );
  };

  const users_rooms_comp = your_rooms_state.map((ele) => {
    return (
      <RoomBox
        key={ele._id}
        key_id={ele._id}
        room_name={ele.room_name}
        action={onRoomBoxClick}
      />
    );
  });

  const onCreateClick = (e) => {
    router.push("/createroom");
  };

  const rooms_comp_jsx = (
    <div className={styles.rooms_activities_wrapper}>
      <div className={styles.recent_activites_header_wrapper}>
        <p className={styles.recent_activites_header_text}>recent activities</p>
        <div className={styles.activities_container}>
          <div className={styles.activity_rect}>
            <p>jason shared a new resource in OnTheBlocks </p>
            <span>3 Hrs Ago</span>
          </div>
          <div className={styles.activity_rect}></div>
          <div className={styles.activity_rect}></div>
          <div className={styles.activity_rect}></div>
          <div className={styles.activity_rect}></div>
        </div>
      </div>

      <div className={styles.rooms_header_wrapper}>
        <p>rooms created</p>
        <div className={styles.rooms_container}>
          <div className={styles.create_room_div}>
            <p>
              want to build a new peer group to teach and learn something
              new...?
            </p>

            <div className={styles.rooms_inner_container}>
              <Image src="/Hero/plus.png" alt="" width={50} height={50}></Image>
              <button onClick={onCreateClick}>Create room</button>
            </div>
          </div>
          {users_rooms_comp}
        </div>
      </div>
    </div>
  );
  return rooms_comp_jsx;
}

function Subs_comp(props) {
  const [subscribers_arr, setsubsribers_arr] = useState([]);
  useEffect(() => {
    const fetchData = async () => {
      const session = await getSession();
      const user_id = session.id;
      const result = await axios.get(
        `${HOST_URL}api/getSubscribers?user_id=${user_id}`
      );
      setsubsribers_arr(result.data);
      console.log(result.data);
    };
    fetchData();
  }, []);

  return <Subscribers subscribers={subscribers_arr} />;
}

function Notebooks_comp(props) {
  const [modalState, setmodalState] = useState(false);
  const [notebookInfo, setnotebookInfo] = useState({
    notebook_name: "",
    notebook_desc: "",
  });
  const [notebooksArr, setnotebooksArr] = useState([]);

  const fetchNotebooks = async () => {
    const session = await getSession();
    const user_id = session.id;
    const response = await axios.get(
      `${HOST_URL}api/getNotebooks?user_id=${user_id}`
    );
    setnotebooksArr(response.data);
    console.log("logging notebooks", response.data);
  };

  useEffect(() => {
    fetchNotebooks();
  }, []);

  const openModal = (e) => {
    if (modalState) {
      setmodalState(false);
    } else {
      setmodalState(true);
    }
  };

  const CreateNewNotebook = async (e) => {
    const session = await getSession();
    const user_id = session.id;
    const response = await axios.post(`${HOST_URL}api/createNotebook`, {
      user_id,
      notebook_name: notebookInfo.notebook_name,
      notebook_desc: notebookInfo.notebook_desc,
    });
    if (response.data.message == "success") {
      fetchNotebooks();
      setmodalState(false);
      setnotebookInfo({
        notebook_name: "",
        notebook_desc: "",
      });
    }
  };

  const Notebooks_comp_arr = notebooksArr.map((ele) => {
    return (
      <Link href={`/notebooks/${ele._id}`} key={ele._id}>
            <Card sx={{ width: 300, height: 300 }} key={ele._id}>
              <CardContent>
                <Typography variant="h5" component="div">
                  {ele.notebook_name}
                </Typography>
                <Typography sx={{ mb: 1.5 }} color="text.secondary">
                  {dayjs(ele.creation_date).fromNow()}
                </Typography>
                <Typography variant="body2">{ele.notebook_desc}</Typography>
              </CardContent>
            </Card>
      </Link>
    );
  });

  return (
    <>
      <div
        style={{
          order: "10",
          display: "flex",
          alignItems: "flex-start",
          width: "100%",
          gap: "30px",
          flexWrap: "wrap",
        }}
      >
        <Box
          sx={{
            width: 300,
            height: 300,
            borderRadius: 5,
            backgroundColor: "primary.light",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            "&:hover": {
              backgroundColor: "primary.main",
              opacity: [0.9, 0.8, 0.7],
            },
          }}
        >
          <Button
            variant="outlined"
            onClick={openModal}
            startIcon={<AddIcon />}
          >
            New Notebook
          </Button>
        </Box>
        {Notebooks_comp_arr}
      </div>
      <Modal
        isOpen={modalState}
        contentLabel="new notebook"
        onRequestClose={openModal}
        className={styles.RCModalStyles}
        overlayClassName={styles.RCModalOverlayStyles}
      >
        <TextField
          id="outlined-basic"
          label="Notebook Name"
          variant="outlined"
          onChange={(e) =>
            setnotebookInfo((prev_value) => {
              return { ...prev_value, notebook_name: e.target.value };
            })
          }
          value={notebookInfo.notebook_name}
        />
        <TextField
          id="outlined-basic"
          label="Notebook Description"
          variant="outlined"
          sx={{ marginTop: "20px" }}
          onChange={(e) =>
            setnotebookInfo((prev_value) => {
              return { ...prev_value, notebook_desc: e.target.value };
            })
          }
          value={notebookInfo.notebook_desc}
        />
        <Button
          variant="contained"
          sx={{ marginTop: "30px" }}
          onClick={CreateNewNotebook}
        >
          Create
        </Button>
      </Modal>
    </>
  );
}
