import React, { useState, useEffect, useContext } from 'react'
import RoomHeader from '../../components/RoomHeader'
import Head from 'next/head'
import Link from 'next/link'
import { useRouter } from 'next/router'
import styles from '../../styles/Room.module.css'
import clientPromise, { ObjectId } from '../../lib/mongodb'
import Modal from 'react-modal'
import ResourceCreationComp from '../../components/ResourceCreationComp'
import axios from 'axios'
import getConfig from "next/config"
import Collapsible from 'react-collapsible';
import ResourceCapsule from '../../components/ResourceCapsule'
import { getSession } from 'next-auth/react'
import { UserTypeContext } from '../../contexts/UserTypeContext'


import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';


import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Typography from '@mui/material/Typography';

import Paper from '@mui/material/Paper';


Modal.setAppElement('#__next')
const { publicRuntimeConfig } = getConfig()
const { HOST_URL } = publicRuntimeConfig


function Room({ room_info }) {
  const router = useRouter()
  const { room_name = [], room_id } = router.query;
  const [UserType, setUserType] = useState('')

  useEffect(() => {
    async function fetchData() {
      const session = await getSession()
      const user_id = session.id
      const result = await axios.get(`${HOST_URL}/api/checkusertype?user_id=${user_id}&room_id=${room_id}`)
      setUserType(result.data.user_type)
      console.log("ðŸš€ ~ file: [...room_name].js ~ line 35 ~ fetchData ~ result.data.user_type", result.data.user_type)
    }
    fetchData();

  }, [UserType])


  const UpdateUserType = async () => {
    const session = await getSession()
    const user_id = session.id
    const result = await axios.post(`${HOST_URL}/api/joinroom`, {
      room_id,
      user_id
    })
    if (result.status == '200') {
      setUserType('RM')
    }

  }


  const room_body = (
    <UserTypeContext.Provider value={[UserType, UpdateUserType]}>
      <div className={styles.main_div}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/peerllogo.svg" />
          <title>PEERL</title>
        </Head>
        <RoomHeader room_info={room_info} room_context={room_name[1]} router={router} />
        <div className={styles.body_flex_wrapper}>
          {room_name[1] == 'resources' && <Resources_Comp room_id={room_id} />}
          {room_name[1] == 'qna' && <Qna_Comp />}
          {room_name[1] == 'voices' && <Voices_Comp />}
          <nav className={styles.nav_panel}>
            <Link href={`${room_name[0]}/resources?room_id=${room_id}`} replace>
              <div className={styles.link_group}>
                <div className={styles.link_icon_peergroups}></div>
                <a className={styles.link_text}>resources</a>
              </div>
            </Link>
            <Link href={`${room_name[0]}/qna?room_id=${room_id}`} replace>
              <div className={styles.link_group}>
                <div className={styles.link_icon_rooms}></div>
                <a className={styles.link_text}>Q n A</a>
              </div>
            </Link>
            <Link href={`${room_name[0]}/voices?room_id=${room_id}`} replace>
              <div className={styles.link_group}>
                <div className={styles.link_icon_subscriptions}></div>
                <a className={styles.link_text}>voices</a>
              </div>
            </Link>

          </nav>
        </div>


      </div>
    </UserTypeContext.Provider>

  )

  return room_body


  //all users
  // room level notifications
  // room settings
  // search
  // user profile
  // room name
  // room dp
  // room context heading
  //nav bar having resources , qna, voices
  //recent room events
  //room admin panel - resource control(RUD), user control



}




function Resources_Comp(props) {
  
  const [resourceState, setresourceState] = useState([])
  const [UserType, UpdateUserType] = useContext(UserTypeContext)
  const [modalState, setmodalState] = useState(false)
  useEffect(() => {
    async function fetchData() {
      const response = await axios.get(`${HOST_URL}/api/getRoomResources?room_id=${props.room_id}`)
      console.log("ðŸš€ ~ file: [...room_name].js ~ line 112 ~ useEffect ~ response", response.data)
      setresourceState(response.data)
    }
    fetchData();


  }, [])



  const onResourcesDataUpdate = (new_resource_obj) => {
    console.log("inside the content area..............", new_resource_obj);
    const UpdatedResourceData = resourceState.map(ele => {
      console.log("inside the content area comparing id..............", ele._id == new_resource_obj._id);
      if (ele._id == new_resource_obj._id) {

        return new_resource_obj
      } else {
        return ele
      }
    })
    setresourceState(UpdatedResourceData)
  }

  const onNewResourceAdded = () => {
    //re-fetch the resources
    async function refetchData() {
      const response = await axios.get(`${HOST_URL}/api/getRoomResources?room_id=${props.room_id}`)
      setresourceState(response.data)
    }
    refetchData();
    
    
  }


  const openModal = (e) => {
    if (modalState) {
      setmodalState(false)
    } else {
      setmodalState(true)
    }
  }

  const ResourcesItemsArr = resourceState.map(ele => {
    console.log("ðŸš€ ~ file: [...room_name].js ~ line 119 ~ Resources_Comp ~ ele", ele)

    const tigger_ele = (
      <ResourceCapsule user_id={ele.user_id} time={ele.creation_date} title={ele.resource_title} resource_ratings={ele.appreciation_count} tags={ele.tags} res_id={ele._id} />
    )
    return (
      <Collapsible className={styles.collapsible_container} openedClassName={styles.collapsible_container} key={ele._id} trigger={tigger_ele}>
        <ResourceCreationComp resource_obj={ele} resource_cont_mode="read" update_content_func={onResourcesDataUpdate} />
      </Collapsible>

    )
  })




  const Resources_Comp_jsx = (
    <>
    <div className={styles.rooms_activities_wrapper}>

      <div className={styles.recent_activites_header_wrapper}>
        <p></p>
        <div className={styles.activities_container}>

          <div className={styles.activity_rect}>
          </div>
          <div className={styles.activity_rect}>
          </div>
          <div className={styles.activity_rect}>
          </div>
          <div className={styles.activity_rect}>
          </div>
          <div className={styles.activity_rect}>
          </div>
        </div>
      </div>

      <div className={styles.rooms_header_wrapper}>
        <p>rooms joined</p>
        <div className={styles.rooms_container}>
          {UserType == 'NM' ? "join the room to post resources" : <div className={styles.create_resource_div}>
            <button onClick={openModal} className={styles.Createresourcesbutton}>Create Resource</button>
          </div>}
          {/* <div className={styles.room_box}>
          </div>
          <div className={styles.room_box}>
          </div>
          <div className={styles.room_box}>
          </div> */}
          {ResourcesItemsArr}


        </div>
      </div>
    </div>

    <Modal isOpen={modalState} contentLabel="Post modal" onRequestClose={openModal}
          className={styles.RCModalStyles}
          overlayClassName={styles.RCModalOverlayStyles}
        >
          <ResourceCreationComp room_id={props.room_id} resource_cont_mode="write" modal_func={openModal} new_res_add_func={onNewResourceAdded}/>
    </Modal>
    </>
  )
  return Resources_Comp_jsx
}




function Qna_Comp(props) {
  const router = useRouter()
  const [value, setValue] = useState('');
  const [answer_value, setanswer_value] = useState('')

  const handleChange = (event) => {
    setValue(event.target.value);
  };

  const handleChangeAnswer = (event) => {
    setanswer_value(event.target.value);
  }

  const Qna_Comp_jsx = (
    <div className={styles.rooms_activities_wrapper}>
      <div className={styles.rooms_header_wrapper}>
        <p>rooms created</p>
        <div className={styles.rooms_container}>
          <Box
            component="form"
            sx={{
              width: '75%',
              marginTop: '20px',
              marginBottom: '30px'
            }}
            noValidate
            autoComplete="off"
          >
            <TextField
              id="outlined-multiline-flexible"
              label="post a question"
              multiline
              sx={{
                width: '100%',
                marginBottom: '10px'
              }}
              maxRows={4}
              value={value}
              onChange={handleChange}
            />
             <Button variant="contained">Post your question</Button>
          </Box>



              {/* loop this with questions */}
          <Accordion
            sx={{
              width: '75%',
            }}
          >
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls="panel1a-content"
              id="panel1a-header"
              
            >
              <Typography>How is it done ??</Typography>
            </AccordionSummary>
            <AccordionDetails>
            <Box
                sx={{
                  width: '100%',
                  marginTop: '20px',
                  marginBottom: '30px'
                }}
              >
                <TextField
                  id="outlined-multiline-flexible2"
                  label="answer"
                  multiline
                  sx={{
                    width: '100%',
                    marginBottom: '10px'
                  }}
                  maxRows={4}
                  value={answer_value}
                  onChange={handleChangeAnswer}
                />
                <Button variant="contained">Post your answer</Button>
              </Box>
              {/* loop this around answers for that question */}
              <Box
                sx={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  '& > :not(style)': {
                    m: 1,
                    width: '100%',
                    height: 'fit-content',
                    padding: '20px',
                    flexDirection: 'column'
                  },
                }}
              >
                <Paper elevation={3}> 
                just like that
                <Typography variant="caption" display="block" sx={{
                  marginTop: '10px'
                }}>
                  answered by alby 0on 2022-01-01
                </Typography>
                </Paper>
                
              </Box>
            </AccordionDetails>
          </Accordion>

          <div className={styles.room_box}>
          </div>
          <div className={styles.room_box}>
          </div>
          <div className={styles.room_box}>
          </div>
        </div>
      </div>
    </div>
  )
  return Qna_Comp_jsx
}





function Voices_Comp() {
  return (
    <div>Voices_Comp</div>
  )
}

export default Room





export async function getServerSideProps(context) {

  const { req, query } = context
  const { room_id } = query
  const db_response = await getRoomInfo(room_id)

  console.log("ðŸš€ ~ file: [...room_name].js ~ line 185 ~ getServerSideProps ~ db_response", db_response)


  return {
    props: {
      room_info: db_response
    }
  }



}


const getRoomInfo = async (room_id) => {
  return new Promise(async (resolve, reject) => {
    const client = await clientPromise
    const result = await client.db().collection("rooms").findOne({
      _id: {
        $eq: new ObjectId(room_id)
      }
    })

    const string_Res = JSON.stringify(result)
    const json_res = JSON.parse(string_Res)


    resolve(
      json_res
    )


  })


}